package libraryManSyst;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;


public class LibraryMain {
	
	
	public static boolean isName(String name) {
		if(name.length()==0) return false;
		for(int i=0;i<name.length();i++) {
			if(!((name.charAt(i)<='Z' && name.charAt(i)>='A') || (name.charAt(i)<='z' && name.charAt(i)>='a') || name.charAt(i)==' ' )) return false;
		}
		return true;
	}
	public static boolean isCNIC(String id) {
		if(id.length()==15 && id.charAt(5)=='-' && id.charAt(13)=='-') {
			for(int i=0;i<15;i++) {if((!(id.charAt(i)>='0' && id.charAt(i)<='9') && ( i!= 5 && i!= 13 ))) return false;}
			return true;
		}
		else return false;
	}
	/*public static boolean isLibID(File memberFile, String id) {
		Scanner file=new Scanner(memberFile);
		String line
	}*/
	
	/*public static boolean isLibID(String id) {
		try {
		if(id.charAt(3)=='-') {
			String[] idArray=id.split("-");
			if(idArray.length!=2) return false;
			else if(!idArray[0].equalsIgnoreCase("lib")) return false;
			else if(true) {
				try {
					Integer.valueOf(idArray[1]);
					return true;
				}
				catch(Exception ex){
					return false;
				}
			}
		}
		}
		catch(Exception StringIndexOutOfBoundsException) {
			return false;
		}
		return false;
				
	}	*/
	
	public static boolean isLibID(String id) {
		String[] idArray= id.split("-");
		boolean flag=true;
		if(idArray[0].equals("lib")) {
			if(idArray[1].charAt(0)>='a' && idArray[1].charAt(0)<='z' ) {
				for(int i=5;i<id.length();i++) {
					if(!(id.charAt(i)>='0' && id.charAt(i)<='9')) flag=false;
				}
				return flag;
			}
			else return false;
		}
		else return false;
	}
	
	/*
	public static boolean isLibID(String id) {
		String[] idArray= id.split("-");
		boolean flag;
		if(idArray[0]=="lib") {
			if(idArray[1].charAt(0)>='a' && idArray[1].charAt(0)<='z' ) {
				for(int i=4;i<id.length()) {
					if(!(id.charAt(i)>='0' && id.charAt(i)<='9')) flag=false;
				}
				return flag;
			}
			else return false;
		}
		else return false;
	}
	*/
	public static String enterLibID(File memberFile) throws FileNotFoundException {
		String id=kb.nextLine();
		if(isLibID(id) && !isUnique(memberFile, id)) return id;
		System.out.print("Enter Correct LibID: ");
		return enterLibID(memberFile);
	}

	public static boolean isDateFormat(String date) {
		if(date.length()==10 && date.contains("/")) {
		try {
			String[] dateSplit=date.split("/");
			if(!(Integer.valueOf(dateSplit[0])>0 && Integer.valueOf(dateSplit[0])<32))   return false;
			if(!(Integer.valueOf(dateSplit[1])>0 && Integer.valueOf(dateSplit[1])<13))   return false;
			if(!(Integer.valueOf(dateSplit[2])>0))   return false;
			return true;
		}
		catch(Exception ex) {
			return false;
		}
		}
		else return false;
	 }
	public static boolean isPhone(String phone) {
		if(phone.length()==12) {
			for(int i=0;i<phone.length();i++) {
				
				if(i==4 && phone.charAt(4)!='-') return false;
				if(i==4 && phone.charAt(4)=='-') continue;
				else if(!(phone.charAt(i)>='0' && phone.charAt(i)<='9')) return false;
			}
			return true;
		}
		else if (phone.length()==11) {
			for(int i=0;i<phone.length();i++) {
				if(!(phone.charAt(i)>='0' && phone.charAt(i)<='9')) return false;
			}
			return true;
		}
		return false;
	}
	public static boolean isReg(String s) {
		//String mid= (s.charAt(5)+""+s.charAt(6)+""+s.charAt(7)).toLowerCase();
		
		if(s.length() != 12) return false;
		
		int mid2= s.charAt(5)+s.charAt(6)+s.charAt(7);
		int last= s.charAt(9)+s.charAt(10)+s.charAt(11);
		
		if(!((s.charAt(0)+""+s.charAt(1)).toLowerCase().equals("fa")  || 	(s.charAt(0)+""+s.charAt(1)).toLowerCase().equals("sp")))
				return false;
		else if (!(s.charAt(2) >= '0' && s.charAt(2)<='9') &&(s.charAt(3)>='0' && s.charAt(3)<='9')) return false;
		else if(s.charAt(4)!= '-' || s.charAt(8) != '-') return false;
		else if(!((mid2 >= 291 && mid2 <= 366) || (mid2 >= 195 && mid2 <= 270))) return false;
		else if(!(last>=144 && last <= 171)) return false;
		return true;
	}
	public static boolean isEmail(String s) {
		int test=0;
		int contLen=0;
		for(int i=0;i<s.length();i++) {
			if(s.charAt(i)=='@') {
				test++;
				contLen=1;
			}
			if(s.charAt(i)=='.' && contLen==1) {
				test++;
				break;
			}
		}
		return  test==2;
	}
	//take input;
	static Scanner input= new Scanner(System.in);
	public static String enterForm(File file,String what,int opt) throws FileNotFoundException{
		String name;
		System.out.print("Enter "+what+": ");
		do {
			name=input.nextLine();
			if((isReg(name) && opt==2 && !isUnique(file,name)) ) System.out.println("This "+"Registration No"+" already Exists...");
			if((isCNIC(name) && opt==3 && !isUnique(file,name))) System.out.println("This CNIC No already Exists...");
			if(((isName(name) && name.length()<=40 && opt==1) || (isReg(name) && opt==2 && isUnique(file,name)) || (isCNIC(name) && opt==3 && isUnique(file,name)) || (isDateFormat(name) && opt==4) || (isPhone(name) && opt==6 ) || (isEmail(name) && opt==7)) ) break;
			else System.out.print("Opss! Enter Correct "+what+": ");
		}while(true);
		return name;
	}
	/*public static String generateLibNum(File file) throws FileNotFoundException {
		Scanner input = new Scanner(file);
		int rank;
		try{
		rank= input.nextInt();
		rank++;
		PrintWriter pw=new PrintWriter(file);
		pw.write(Integer.toString(rank));
		pw.close();
					
				}
		catch(Exception ex) {
			PrintWriter pw=new PrintWriter(file);
		
		pw.write(Integer.toString(rank=1));
		pw.close();
				}
		return String.valueOf(rank);
		}*/
	
	public static String generateLibNum(File file) throws FileNotFoundException {
		Scanner input = new Scanner(file);
		String line=input.nextLine();
		String intPart="";
		for(int i=1;i<line.length();i++) intPart+=(""+line.charAt(i));
		int intPartB=Integer.valueOf(intPart);
		intPartB++;
		PrintWriter pw= new PrintWriter(file);
		String newString=line.charAt(0)+String.valueOf(intPartB);
		pw.write(newString);
		pw.close();
		return newString;
		}
	
	static Scanner kb= new Scanner(System.in);
	public static String currentDate() {
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");  
		   LocalDateTime now = LocalDateTime.now();  
		   return  dtf.format(now).toString();
	}
	
	
	public static void formAddStudent(File file,File tempLibNum) throws IOException {
		FileWriter fw = new FileWriter(file, true);
		PrintWriter pw = new PrintWriter(fw);
		
		
		String[] dataStudent= new String[8];
		
		//System.out.print("Enter Full Name: ");
		dataStudent[1] = enterForm(file,"Name",1);
		//System.out.print("Enter Registration No: ");
		dataStudent[2] = enterForm(file,"Registration No (format: fa18-bse-001)",2).toUpperCase();
		//System.out.print("Enter CNIC: ");
		dataStudent[3]=enterForm(file,"CNIC (format: 61101-1234567-8)",3);
		//System.out.print("Enter DOB: ");
		dataStudent[4] = enterForm(file,"DOB (format: dd/mm/yyyy)",4);
		//DOJ
		dataStudent[5]=currentDate();
		
		dataStudent[6] =enterForm(file,"Phone no. (format: 0123-1234567)",6);
		//System.out.print("Enter E-mail Address: ");
		dataStudent[7] = enterForm(file,"E-mail (format: abc123@example.com)",7);
		
		dataStudent[0]="lib-"+generateLibNum(tempLibNum);
		
		for(int i=0;i<dataStudent.length;i++) pw.print(dataStudent[i]+",");
		pw.println("");
		System.out.println("NEW LIBRARY ID ISSUED:\nID : "+dataStudent[0]);
		pw.close();
		
	}
	public static String takeInputAsLine() {
		Scanner kb= new Scanner(System.in);
		String result=kb.nextLine();
		
		return result;
	}

public static void readLine(String text) {
		String[]  textA=text.split(",");
		for(int i=0;i<textA.length;i++) {
			System.out.print(textA[i]);
			if(i==0) for(int j=textA[i].length();j<=15;j++) System.out.print(" ");
			else if(i==1) for(int j=textA[i].length();j<=45;j++) System.out.print(" ");
			else System.out.print("\t\t");
		}
	}


public static void copyFileAToFileB(File a,File b) throws FileNotFoundException {
	Scanner scA=new Scanner(a);
	PrintWriter pwB= new PrintWriter(b);
	while(scA.hasNext()) {
		String line=scA.nextLine();
		pwB.println(line);
	}
	scA.close();pwB.close();
}

public static void editRecord(File file,String id,int fromChange,String toChange,boolean deleteFlag) throws IOException{
	//name=1,reg=2,cnic=3,dob=4,phone=6,email=7
	Scanner output=new Scanner(file);
	//temp file creation
	
	File tempFile = new File("tempFile.txt");
    if(tempFile.createNewFile()){
    }else System.out.print("");
    PrintWriter pwTemp=new PrintWriter(tempFile);
	while(output.hasNext()) {
		String line=output.nextLine();
		if(line.toLowerCase().contains(id.toLowerCase())) {
			String[] lineArray=line.split(",");
			lineArray[fromChange]=toChange;
			if(deleteFlag) continue;
			else {for(int i=0;i<lineArray.length;i++) pwTemp.print(lineArray[i]+",");
			}
			pwTemp.println("");		
		}
		else pwTemp.println(line);
	}
	pwTemp.close();output.close();
	copyFileAToFileB(tempFile,file);
	
}
/*public static void readLineBook(String line){
	//bookId,name,Author,edition,genre
	 String[] splitLine=line.split(",");
	 System.out.print(splitLine[0]+"\t\t");
	 for(int i=0;i<35;i++) {
		 try {
			 System.out.print(splitLine[1].charAt(i));
		 }
		 catch (Exception ex) {
			 System.out.print(" ");
		 }
	 }
	 for(int i=0;i<30;i++) {
		 try {
			 System.out.print(splitLine[2].charAt(i));
		 }
		 catch (Exception ex) {
			 System.out.print(" ");
		 }
	 }
	 for(int i=3;i<splitLine.length;i++) {
		 System.out.print("\t\t"+splitLine[i]);
	 }
	 System.out.println();
}*/
public static void readLineBook(String line, File issuedBook) throws NumberFormatException, FileNotFoundException{
	String[] lineArray=line.split(",");
	System.out.print(lineArray[0]+"      ");
	System.out.print(lineArray[1]);
	for(int i=lineArray[1].length();i<=50;i++) System.out.print(" ");
	System.out.print(lineArray[2]);
	for(int i=lineArray[2].length();i<=45;i++) System.out.print(" ");
	System.out.print(lineArray[3]);
	for(int i=lineArray[3].length();i<=20;i++) System.out.print(" ");
	System.out.print(lineArray[4]+"\t\t");
	System.out.print(lineArray[5]+"\t\t");
	if(bookStatus(issuedBook,lineArray[0],Integer.valueOf(lineArray[5]))) {
		System.out.println("Not Available");
	}
	else System.out.println("Available");
	
	
}

public static boolean bookStatus(File bookIssue,String bookID,int bookQuantity) throws FileNotFoundException {
	Scanner booksIssued=new Scanner(bookIssue);
	String line;
	int countQuant=0;
	while(booksIssued.hasNext()) {
		line=booksIssued.nextLine();
		if(line.toLowerCase().contains(bookID.toLowerCase())) {
			countQuant++;
		}
	}
	booksIssued.close();
	return countQuant==bookQuantity;
}
	
	public static boolean isUnique(File file,String id) throws FileNotFoundException {
		Scanner input = new Scanner(file);
		while(input.hasNext()) {
			String text=input.nextLine();
			if(text.toLowerCase().contains(id.toLowerCase())) {
				return false;
			}
		}
		return true;
	}
	
//Search recursion=========================================================================================================================================
	
			public static void rSearch(Scanner input,String id,String line,int infoBar,boolean book,File issuedBook) throws FileNotFoundException {//infoBar==1 member,infoBar==2 book
				if(infoBar==1) {//member
					System.out.println("ID           Name                                               Author's Name\t\t\t\t      Edition\t\t   Genre");
					System.out.println("==============================================================================================================================================================================================================");
					infoBar=0;
				}
				else if(infoBar==2) {//book
					System.out.println("Lib#\t\tName\t\t\t\t\t      Reg#\t\t\tCNIC\t\t\tDOB\t\t\tDOJ\t\t\tPhone#\t\t\tE-mail");
					System.out.println("==============================================================================================================================================================================================================");
					infoBar=0;
				}
				if(!input.hasNext()) {
					input.close();
					if(infoBar!=9) System.out.println("No Such Record Found! \n\n");
					return;
				}
				line=input.nextLine();
				if(line.toLowerCase().contains(id.toLowerCase())) {
					if(book) 	readLineBook(line,issuedBook);
					else 	    readLine(line);
					System.out.println();   infoBar=9;
				}
				rSearch(input,id,line,infoBar,book,issuedBook);
			}
			
	
	// Search Standard====================================================================================================================================================
	public static void searchRecord(File file,boolean searchFlag,String toSearch,boolean book,File issuedBook) throws FileNotFoundException {
		Scanner input = new Scanner(file);
		int countSearch=0;
		if(book) System.out.println("ID           Name                                               Author's Name\t\t\t\t      Edition\t\t   Genre        Quantity        Status");
		
		else	System.out.println("Lib#\t\tName\t\t\t\t\t      Reg#\t\t\tCNIC\t\t\tDOB\t\t\tDOJ\t\t\tPhone#\t\t\tE-mail");
		System.out.println("==========================================================================================================================================================================================================");
        while(input.hasNext()){
        	String text=input.nextLine();
        	if(text.length()==0) {
        		continue;
        		
        	}
        	if(searchFlag && text.toLowerCase().contains(toSearch.toLowerCase()) && !book) {
			        	readLine(text);
			        	countSearch++;
			        	System.out.println();
        				}
        	else if(searchFlag && text.toLowerCase().contains(toSearch.toLowerCase()) && book ) {
        		readLineBook(text,issuedBook);
        		countSearch++;
        	}
        }
        if(countSearch==0) System.out.println("No Such Record Found! \n\n");
        input.close(); 
	}

public static String enterIntAsNumber() {
	String opt;
	while(true) {
		opt=input.nextLine();
		try {
			Integer.valueOf(opt);
			break;
		}
		catch(Exception ex){
			System.out.print("Enter Correct Number: ");
		}
		
	}
	return opt;
}	
	public static void formBook(File file) throws IOException {
		FileWriter fw = new FileWriter(file, true);
		Scanner kb=new Scanner(System.in);
		String[] data=new String[6];
		System.out.print("Enter Book Name: ");
		data[1]=kb.nextLine();											//////
		System.out.print("Enter Author Name: ");
		data[2]=kb.nextLine();
		System.out.print("Enter Edition: ");
		data[3]=kb.nextLine();
		System.out.print("Enter Category: ");
		data[4]=kb.nextLine();
		System.out.print("Enter Quantity: ");
		data[5]=enterIntAsNumber();
		data[0]=(data[2].charAt(0)+""+data[2].charAt(1)+data[2].charAt(2)+data[1].charAt(0)+""+data[1].charAt(1)+data[1].charAt(2)+data[3].charAt(0)).toUpperCase();
		PrintWriter pw=new PrintWriter(fw);
		for(int i=0;i<6;i++) pw.print(data[i]+",");
		pw.println();
		System.out.println("Book ID ISSUED\n BookID : "+data[0]);
		pw.close();
	}
	
	public static void addIssued(File file,File check,File bookHistory,File memberFile) throws IOException {
		FileWriter fw = new FileWriter(file, true);
		PrintWriter pw=new PrintWriter(fw);
		
		FileWriter fwB = new FileWriter(bookHistory, true);
		PrintWriter pwB=new PrintWriter(fwB);
		
		System.out.print("Enter BookID: ");
		String bookID=takeInputAsLine();														////
		System.out.print("Enter Library ID: ");
		String libID=enterLibID(memberFile);
		searchRecord(check,true,bookID,true);
		System.out.println("This Book has Been issued to "+libID);
		
		pw.print(bookID+","+libID+","+currentDate());
		pwB.print(bookID+","+libID+","+currentDate());
		pw.println();pwB.println();
		pw.close();fw.close();
		pwB.close();fwB.close();
	}
	
	public static int correctOption() {
		String opt;
		while(true) {
			opt=input.nextLine();
			try {
				Integer.valueOf(opt);
				break;
			}
			catch(Exception ex){
				System.out.print("Enter Correct Option: ");
			}
			
		}
		return Integer.valueOf(opt);
	}
	
	
	public static void bookHistory(File file,File memberFile, String bookID) throws FileNotFoundException {
		Scanner output = new Scanner(file);
		while(output.hasNext()) {
			String line=output.nextLine();
			if(line.toLowerCase().contains(bookID.toLowerCase())) {
				String[] lineB = line.split(",");
				searchRecord(memberFile,true,lineB[1],false);
			}
			
			
		}
		output.close();
	}
	
	
	public static void main(String[] args) throws IOException {
		
		File memberFile=new File("D:\\Projects\\Pf Project\\members.txt");
		File bookFile=new File("D:\\Projects\\Pf Project\\Books.txt");
		File tempLibNum=new File("D:\\Projects\\Pf Project\\LibID.txt");
		File issuedBook=new File("D:\\Projects\\Pf Project\\issued.txt");
		File issuedBookHistory=new File("D:\\Projects\\Pf Project\\issuedBookHistory.txt");
		File returnBook=new File("D:\\Projects\\Pf Project\\return.txt");
		File returnedBookHistory=new File("D:\\Projects\\Pf Project\\returnedBookHistory.txt");
		
		int option;
		
		Scanner kb=new Scanner(System.in);
		System.out.println("=====================     ==      ==WELCOME TO LIBRARY==    ==     =======================");
		while(true) {//the most outer loop
			
			
			
			System.out.print("1. Student Membership Record\n2. Books Catalogue\n3. Issue Book\n4. Return Book\n5. Exit\n Choose One Option: ");//to edit menu
			option=correctOption();
			if(option==5) {
				System.out.println("Bye");
				break;
			}
			if(option==1) {
				while(option!=6) {
					System.out.print("1. Add Student Record\n2. Edit Student Record\n3. Delete Record\n4. View Student Records\n5. Search for Student Record\n6. Exit\n Choose One Option: ");
						option=correctOption();
						if(option==1) formAddStudent(memberFile,tempLibNum);
						else if(option==2) {
							System.out.print("Enter Library ID: ");
							String id=enterLibID(memberFile);
							
							boolean idExists=!isUnique(memberFile,id);
							
							searchRecord(memberFile,true,id,false,issuedBook);
							while(option!=6 && idExists) {
								System.out.print("1. Edit Name\t2. Edit Regist#\t3. Edit DOB\t4. Edit Phone\t5. Edit E-mail\t6.Exit\nChoose One Option: ");
								
								option=correctOption();
								String toEdit;																		 
								
								if(option==1) { 
										toEdit=enterForm(memberFile,"New Name",1);
										editRecord(memberFile,id,1,toEdit,false);
										
								}
								if(option==2) { 
										toEdit=enterForm(memberFile,"New Registration No",2);
										editRecord(memberFile,id,2,toEdit,false);
										
								}
								if(option==3) { 
								
										toEdit=enterForm(memberFile,"New DOB",4);
										editRecord(memberFile,id,4,toEdit,false);
										
								}
								if(option==4) { 
										toEdit=enterForm(memberFile,"New Phone",6);
										editRecord(memberFile,id,6,toEdit,false);
										
								}
								if(option==5) {
										toEdit=enterForm(memberFile,"New Name E-mail",7);
										editRecord(memberFile,id,7,toEdit,false);
										
								
								}
							}
							
							
						}
						
						////delete
						
						else if(option==3) {
							searchRecord(memberFile,true,"",false,issuedBook);
							System.out.print("Enter LibID: ");
							String del=enterLibID(memberFile);
							searchRecord(memberFile,true,del,false,issuedBook);
							editRecord(memberFile,del,1,"",true);
						}
						
						
						else if(option==4) searchRecord(memberFile,true,"",false,issuedBook);
						else if(option==5) {
							//search
							System.out.print("Search by any Keyword:  ");
							String searchTemp=takeInputAsLine();
							searchRecord(memberFile,true,searchTemp,false,issuedBook);
							
						}
						
				}
			}
			
			else if(option==2) {
				
							while(option!=6) {
								System.out.print("1. Add Book Record\n2. Edit Book Record\n3. Delete Book Record\n4. View Book Record\n5. Search Book\n6. Exit\n Choose One Option: ");
								option=correctOption();
								if(option==1) {
									formBook(bookFile);
								}
								else if(option==2) {
									System.out.println("Enter BookID: ");
									String bookID=takeInputAsLine();
									
									searchRecord(bookFile,true,bookID,true,issuedBook);
									while(option!=5) {
										System.out.print("\n1. Edit Name\t2. Edit Author Name\t3. Edit Edition\t4. Edit Category\t5. Exit\nChoose One Option: ");
										
										option=correctOption();
										String toEditB;																		 
										
										if(option==1) { System.out.print("Enter New Name: ");
												toEditB=takeInputAsLine();
												editRecord(bookFile,bookID,1,toEditB,false);
												
										}
										if(option==2) { System.out.print("Enter New Author: ");
												toEditB=takeInputAsLine();
												editRecord(bookFile,bookID,2,toEditB,false);
												
										}
										if(option==3) { System.out.print("Enter New Edition: ");
												toEditB=takeInputAsLine();
												editRecord(bookFile,bookID,3,toEditB,false);
												break;
										}
										if(option==4) { System.out.print("Enter New Category: ");
												toEditB=takeInputAsLine();
												editRecord(bookFile,bookID,4,toEditB,false);
												
										}
										
									}
									
								}
								else if(option==3) {
									searchRecord(bookFile,true,"",true,issuedBook);
									System.out.print("Enter BookID: ");
									String delB=takeInputAsLine();
									searchRecord(bookFile,true,delB,true,issuedBook);
									editRecord(bookFile,delB,1,"",true);
								}
								else if(option==4) {
									searchRecord(bookFile,true,"",true,issuedBook);
								}
								else if(option==5) {
									System.out.print("Search By Anykeyword: ");
									String sBook=takeInputAsLine();
									searchRecord(bookFile,true,sBook,true,issuedBook);
								}
								
							}
							
				
			}
			else if(option==3) {
				System.out.println("\n1. Add Issued Books Record\n2. Edit Issued Books Record\n3. Search Book History\n4. Exit");
				option=correctOption();
						while(option!=4) {
						if(option==1) {//1. Add Issued Books Record
							addIssued(issuedBook,bookFile,issuedBookHistory,memberFile);
							break;
						}
						else if(option==2) {//Edit Issued Books
							System.out.print("Enter BookID: ");
							String issuedBookSearch=takeInputAsLine();
							searchRecord(bookFile,true,issuedBookSearch,true,issuedBook);
							System.out.print("Enter New LibraryID: ");
							String libIDcheck=enterLibID(memberFile);
							editRecord(issuedBook,issuedBookSearch,1,libIDcheck,false);
						}
						else if(option==3) {
							System.out.print("Enter BookID: ");
							String issuedHistory=takeInputAsLine();
							searchRecord(bookFile,true,issuedHistory,true,issuedBook);
							System.out.println("\n\t\t\t\t ====================== This Book is Issued By ====================== ");
							bookHistory(issuedBook,memberFile, issuedHistory);
							if(isUnique(issuedBookHistory,issuedHistory)) System.out.println("						       Never Issued By Anyone");
							//break;
						}
						
					}
			}
			else if(option==4) {
				System.out.println("1. Add Returned Book\n2. View Returned Book History\n3. Search Returned Book History\n4. Exit");
					option=0;
					while(option!=4) {
						option=correctOption();
					if(option==1) returnBook(returnBook,issuedBook,memberFile,bookFile,returnedBookHistory);
					if(option==2) viewBooksHistory(issuedBookHistory,returnedBookHistory, bookFile,memberFile);
					}
			}
			
		
			
			
		
		
	}
	
	
//kb.close();
}
	public static String specificString(String str,int startIndex,int endIndex) {
		String result="";
		for(int i=startIndex;i<=endIndex;i++) {
			result+=(""+str.charAt(i));
		}
		return result;
	}
	
	public static String searchLine(File file,String lineToSearch,int opt) throws FileNotFoundException {//0 line,1 name
		Scanner search=new Scanner(file);
		String line;
		while(search.hasNext()) {
			line=search.nextLine();
			if(opt>0 && line.toLowerCase().contains(lineToSearch.toLowerCase())) {
				String[] lineSplit=line.split(",");
				search.close();
				return lineSplit[opt];
			}
			if(line.equalsIgnoreCase(lineToSearch) && opt==0) {
				search.close();
				return line;
			}
		}
		search.close();
		return null;
		
	}
public static void readLineBooksHistory(String line) {
	String[] lineSplit = line.split(",");
	System.out.print(lineSplit[0]+"\t\t");
	System.out.print(lineSplit[1]);
	for(int i=lineSplit[1].length();i<=50;i++) System.out.print(" ");
	System.out.print(lineSplit[2]+"\t\t");
	System.out.print(lineSplit[3]);
	for(int i=lineSplit[3].length();i<=45;i++) System.out.print(" ");
	System.out.print(lineSplit[4]+"\t\t");
}

	public static void viewBooksHistory(File issuedBookHistory,File returnedBookHistory, File  books,File members) throws FileNotFoundException{
		System.out.println("BookID\t\tBook Name\t\t\t\t\t   Member libID\t\tMember Name\t\t\t\t      DO.Issue\t\t        DO.Return");
		System.out.println("===============================================================================================================================================================================");
		Scanner issuedBookHist=new Scanner(issuedBookHistory);
		Scanner returnedBookHist=new Scanner(returnedBookHistory);
		String newText;
		if(isUnique(issuedBookHistory,"lib")) System.out.println("No Record!");
		else {
			while(issuedBookHist.hasNext()) {
				String line=issuedBookHist.nextLine();
				//15
				String[] lineSplit=line.split(",");
				newText=lineSplit[0]+","+searchLine(books,lineSplit[0],1)+","+lineSplit[1]+","+searchLine(members,lineSplit[1],1)+","+lineSplit[2];
				//System.out.print(lineSplit[0]+"\t\t"+searchLine(books,lineSplit[0],1)+"\t\t\t\t"+lineSplit[1]+"\t\t\t"+searchLine(members,lineSplit[1],1));
				//System.out.print("\t\t\t\t"+lineSplit[2]+"\t\t");
				readLineBooksHistory(newText);
				if(isUnique(returnedBookHistory,specificString(line,0,14))) System.out.println("Not Returned Yet!");
				else System.out.println(searchLine(returnedBookHistory,specificString(line,16,24),2));
				
			}
			
		}
		
	}
	public static boolean isBookID(String id,File bookFile) throws FileNotFoundException {
		if(!isUnique(bookFile,id)) return true;
		if(id.length()==7) {
			if(id.charAt(6)>='0' && id.charAt(6)<='9') return true;
		}
		return false;
	}
	public static String enterBookID(File bookFile) throws FileNotFoundException {
		String id=kb.nextLine();
		if(isBookID(id,bookFile)) return id;
		System.out.print("Enter Correct BookID: ");
		return enterBookID( bookFile);
	}
	public static String enterLibIDb(File memberFile, File issuedBook) throws FileNotFoundException {
		String libID;
		while(true) {
			libID=enterLibID(memberFile);
			if(isUnique(issuedBook,libID)) {
				System.out.println("No book Issued to : "+libID);
				System.out.print("Enter Correct LibID: ");
			}
			else return libID;
		}
	}
	public static void returnBook(File returnFile,File issuedBook,File memberFile,File bookFile,File returnedBookHistory) throws IOException {
		FileWriter fw=new FileWriter(returnFile,true);
		PrintWriter pw=new PrintWriter(fw);
		
		FileWriter fwB=new FileWriter(returnedBookHistory,true);
		PrintWriter pwB=new PrintWriter(fwB);
		
		String libID;String bookID;
		while(true) {
			System.out.print("Enter LibID: ");
			libID=enterLibIDb(memberFile,issuedBook);			///no such book issued then??
			System.out.print("Enter BookID: ");
			bookID= enterBookID(bookFile);
			if( !isUnique(issuedBook,libID) && !isUnique(issuedBook,bookID) ) break;
			
		}
		pw.println(bookID+","+libID+","+currentDate());
		pwB.println(bookID+","+libID+","+currentDate());
		editRecord(issuedBook,libID,1,"",true);
		pw.close();fw.close();
		pwB.close();fwB.close();
		
	}
}
